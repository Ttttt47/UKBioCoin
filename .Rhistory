q = read.csv("D:\\project\\UKBioCoin\\UKBioCoin\\test_data\\cov_yy.table",sep = ' ')
q[1,]
View(q)
colnames(q)
colnames(q)[1]
colnames(q)[79]
colnames(q)[78]
colnames(q)[80]
colnames(q)[584]
colnames(q)[585]
q[1,1]
q[1,79]
q[1,]
q[1,1:20]
q[1,80]
q[1,79]
q[80,]
View(q)
colnames(q)
q[1,c(1,2,80,585:589)]
xy = read.csv("D:\\project\\UKBioCoin\\UKBioCoin\\test_data\\cov_xy_sam.table",sep = ' ')
colnames(xy)
colnames(xy)[1,3,4,5,6,29]
colnames(xy)[c(1,3,4,5,6,29)]
colnames(q)
colnames(q)[1:2]
colnames(xy)[c(1,3,4,5,6,29)]
colnames(xy)
colnames(xy)[13]
colnames(q)[33]
colnames(q)[35]
xy[6]
xy[1,6]
xy[1,3:6]
xy[1,c(1,3:6)]
xy[1,c(29,1,3:6)]
xy[1,c(29,13:15,1,3:6)]
log(e)
log(2.7)
pt(-abs(8.12),df=270000-2)*2
### 3. OATH algorithm
library(glue)
# loading covariance
var_x = read.table(glue('./test_data/var_x_sam.table'))[[1]]
cov_xy = as.data.frame(as.matrix(fread(file=glue('./test_data/cov_xy_sam.table')),rownames=1))
cov_yy = as.data.frame(as.matrix(fread(file=glue('./test_data/cov_yy.table')),rownames=1))
library(read.table)
library(data.table)
# loading covariance
var_x = read.table(glue('./test_data/var_x_sam.table'))[[1]]
cov_xy = as.data.frame(as.matrix(fread(file=glue('./test_data/cov_xy_sam.table')),rownames=1))
cov_yy = as.data.frame(as.matrix(fread(file=glue('./test_data/cov_yy.table')),rownames=1))
View(cov_xy)
p = length(var_x)
n = 270000 # est. effective sample size
total_pcs_num=20
using_pcs_num=5
covar_name = c("X1160.0.0", "X1200.0.0", "X1289.0.0","PC1", "PC2", "PC3", "PC4", "PC5")
reg_summary = as.data.frame(matrix(,p,5))
colnames(reg_summary) = c('ID','BETA','SE','T-STAT','P')
d = 2+length(covar_name)
Theta = matrix(0,d,d)
Theta[c(1,3:d),c(1,3:d)] = as.matrix(cov_yy[c(phe_name,covar_name),c(phe_name,covar_name)])
phe_name = 'X31.0.0'  # phenotype to reg
Theta[c(1,3:d),c(1,3:d)] = as.matrix(cov_yy[c(phe_name,covar_name),c(phe_name,covar_name)])
cov_xy_part = cov_xy[,c(phe_name,covar_name)]
start = Sys.time()
for (i in c(1:p)){
if (i%%10000==0) print(glue('{100*(i/p)}% calculated'))
Theta[2,-2] = as.matrix(cov_xy_part[i,])
Theta[-2,2] = as.matrix(t(cov_xy_part[i,]))
Theta[2,2] = var_x[i]
# get Omega, Lambda, b
Omega = Theta[2:d,2:d]
Lambda = diag(diag(Omega))
b = matrix(Theta[2:d,1] / diag(Theta[2:d,2:d]),d-1,1)
# compute regression parameter beta. and its variance
rv_Omega = solve(Omega)
beta = rv_Omega %*% Lambda %*% b
var_beta = as.numeric((Theta[1,1]-t(beta)%*%Lambda%*%b)/(n-(d-2)-1))*rv_Omega
# beta/SE follow a t-dis with df=n-2
t_stats = beta/sqrt(diag(var_beta))
p_val = pt(-abs(t_stats),df=n-2)*2
# adding result to summary.
reg_summary[i,2:5] = as.numeric(cbind(beta[1],sqrt(diag(var_beta)[1]),t_stats[1],p_val[1]))
}
Theta
Theta[c(1,3:d),c(1,3:d)] = as.matrix(cov_yy[c(phe_name,covar_name),c(phe_name,covar_name)])
Theta
cov_yy[c(phe_name,covar_name)
,c(phe_name,covar_name)]
phe_name
covar_name
cov_yy
colnames(cov_yy)
rownames(cov_yy)
rownames(cov_yy) =colnames(cov_yy)
Theta = matrix(0,d,d)
Theta[c(1,3:d),c(1,3:d)] = as.matrix(cov_yy[c(phe_name,covar_name),c(phe_name,covar_name)])
Theta
cov_xy_part = cov_xy[,c(phe_name,covar_name)]
cov_xy_part
p
start = Sys.time()
for (i in c(1:p)){
if (i%%10000==0) print(glue('{100*(i/p)}% calculated'))
Theta[2,-2] = as.matrix(cov_xy_part[i,])
Theta[-2,2] = as.matrix(t(cov_xy_part[i,]))
Theta[2,2] = var_x[i]
# get Omega, Lambda, b
Omega = Theta[2:d,2:d]
Lambda = diag(diag(Omega))
b = matrix(Theta[2:d,1] / diag(Theta[2:d,2:d]),d-1,1)
# compute regression parameter beta. and its variance
rv_Omega = solve(Omega)
beta = rv_Omega %*% Lambda %*% b
var_beta = as.numeric((Theta[1,1]-t(beta)%*%Lambda%*%b)/(n-(d-2)-1))*rv_Omega
# beta/SE follow a t-dis with df=n-2
t_stats = beta/sqrt(diag(var_beta))
p_val = pt(-abs(t_stats),df=n-2)*2
# adding result to summary.
reg_summary[i,2:5] = as.numeric(cbind(beta[1],sqrt(diag(var_beta)[1]),t_stats[1],p_val[1]))
}
Theta
Omega
Theta
Theta
as.matrix(cov_xy_part[i,])
cov_xy_part
i
cov_xy_part[i,]
as.matrix(cov_xy_part[i,])
cov_xy_part[i,]
cov_xy_part
cov_xy_part[i,]
cov_xy_part[2,]
cov_xy_part[1521,]
cov_xy_part[1353,]
cov_xy_part[1903,]
cov_xy_part[1972,]
cov_xy_part[1973,]
cov_xy_part[1971,]
start = Sys.time()
for (i in c(1:p)){
if (i%%10000==0) print(glue('{100*(i/p)}% calculated'))
Theta[2,-2] = as.matrix(cov_xy_part[i,])
Theta[-2,2] = as.matrix(t(cov_xy_part[i,]))
Theta[2,2] = var_x[i]
# get Omega, Lambda, b
Omega = Theta[2:d,2:d]
Lambda = diag(diag(Omega))
b = matrix(Theta[2:d,1] / diag(Theta[2:d,2:d]),d-1,1)
# compute regression parameter beta. and its variance
rv_Omega = solve(Omega)
beta = rv_Omega %*% Lambda %*% b
var_beta = as.numeric((Theta[1,1]-t(beta)%*%Lambda%*%b)/(n-(d-2)-1))*rv_Omega
# beta/SE follow a t-dis with df=n-2
t_stats = beta/sqrt(diag(var_beta))
p_val = pt(-abs(t_stats),df=n-2)*2
# adding result to summary.
reg_summary[i,2:5] = as.numeric(cbind(beta[1],sqrt(diag(var_beta)[1]),t_stats[1],p_val[1]))
}
start = Sys.time()
for (i in c(1:p)){
if (i%%10000==0) print(glue('{100*(i/p)}% calculated'))
Theta[2,-2] = as.matrix(cov_xy_part[i,])
Theta[-2,2] = as.matrix(t(cov_xy_part[i,]))
Theta[2,2] = var_x[i]
# get Omega, Lambda, b
Omega = Theta[2:d,2:d]
Lambda = diag(diag(Omega))
b = matrix(Theta[2:d,1] / diag(Theta[2:d,2:d]),d-1,1)
# compute regression parameter beta. and its variance
rv_Omega = try(solve(Omega))
beta = rv_Omega %*% Lambda %*% b
var_beta = as.numeric((Theta[1,1]-t(beta)%*%Lambda%*%b)/(n-(d-2)-1))*rv_Omega
# beta/SE follow a t-dis with df=n-2
t_stats = beta/sqrt(diag(var_beta))
p_val = pt(-abs(t_stats),df=n-2)*2
# adding result to summary.
reg_summary[i,2:5] = as.numeric(cbind(beta[1],sqrt(diag(var_beta)[1]),t_stats[1],p_val[1]))
}
Omega
Lambda
View(cov_xy_part)
cov_xy[,1] == 0
sum(cov_xy[,1] == 0)
sum(cov_xy[!is.na(cov_xy[,1]),1] == 0)
start = Sys.time()
for (i in c(1:p)){
if (i%%10000==0) print(glue('{100*(i/p)}% calculated'))
Theta[2,-2] = as.matrix(cov_xy_part[i,])
Theta[-2,2] = as.matrix(t(cov_xy_part[i,]))
Theta[2,2] = var_x[i]
# get Omega, Lambda, b
Omega = Theta[2:d,2:d]
Lambda = diag(diag(Omega))
b = matrix(Theta[2:d,1] / diag(Theta[2:d,2:d]),d-1,1)
# compute regression parameter beta. and its variance
tryCatch({rv_Omega = solve(Omega)
},error = function(e){
next
}
# rv_Omega = try(solve(Omega))
beta = rv_Omega %*% Lambda %*% b
start = Sys.time()
for (i in c(1:p)){
if (i%%10000==0) print(glue('{100*(i/p)}% calculated'))
Theta[2,-2] = as.matrix(cov_xy_part[i,])
Theta[-2,2] = as.matrix(t(cov_xy_part[i,]))
Theta[2,2] = var_x[i]
# get Omega, Lambda, b
Omega = Theta[2:d,2:d]
Lambda = diag(diag(Omega))
b = matrix(Theta[2:d,1] / diag(Theta[2:d,2:d]),d-1,1)
# compute regression parameter beta. and its variance
tryCatch({rv_Omega = solve(Omega)},error = function(e){
next
})
# rv_Omega = try(solve(Omega))
beta = rv_Omega %*% Lambda %*% b
var_beta = as.numeric((Theta[1,1]-t(beta)%*%Lambda%*%b)/(n-(d-2)-1))*rv_Omega
# beta/SE follow a t-dis with df=n-2
t_stats = beta/sqrt(diag(var_beta))
p_val = pt(-abs(t_stats),df=n-2)*2
# adding result to summary.
reg_summary[i,2:5] = as.numeric(cbind(beta[1],sqrt(diag(var_beta)[1]),t_stats[1],p_val[1]))
}
i
start = Sys.time()
for (i in c(1:p)){
if (i%%10000==0) print(glue('{100*(i/p)}% calculated'))
Theta[2,-2] = as.matrix(cov_xy_part[i,])
Theta[-2,2] = as.matrix(t(cov_xy_part[i,]))
Theta[2,2] = var_x[i]
# get Omega, Lambda, b
Omega = Theta[2:d,2:d]
Lambda = diag(diag(Omega))
b = matrix(Theta[2:d,1] / diag(Theta[2:d,2:d]),d-1,1)
# compute regression parameter beta. and its variance
tryCatch({rv_Omega = solve(Omega)},error = function(e){
})
# rv_Omega = try(solve(Omega))
beta = rv_Omega %*% Lambda %*% b
var_beta = as.numeric((Theta[1,1]-t(beta)%*%Lambda%*%b)/(n-(d-2)-1))*rv_Omega
# beta/SE follow a t-dis with df=n-2
t_stats = beta/sqrt(diag(var_beta))
p_val = pt(-abs(t_stats),df=n-2)*2
# adding result to summary.
reg_summary[i,2:5] = as.numeric(cbind(beta[1],sqrt(diag(var_beta)[1]),t_stats[1],p_val[1]))
}
end = Sys.time()
end-start
reg_summary
start = Sys.time()
for (i in c(1:p)){
if (i%%10000==0) print(glue('{100*(i/p)}% calculated'))
Theta[2,-2] = as.matrix(cov_xy_part[i,])
Theta[-2,2] = as.matrix(t(cov_xy_part[i,]))
Theta[2,2] = var_x[i]
# get Omega, Lambda, b
Omega = Theta[2:d,2:d]
Lambda = diag(diag(Omega))
b = matrix(Theta[2:d,1] / diag(Theta[2:d,2:d]),d-1,1)
# compute regression parameter beta. and its variance
tryCatch({rv_Omega = solve(Omega)},error = function(e){
})
# rv_Omega = try(solve(Omega))
beta = rv_Omega %*% Lambda %*% b
var_beta = as.numeric((Theta[1,1]-t(beta)%*%Lambda%*%b)/(n-(d-2)-1))*rv_Omega
# beta/SE follow a t-dis with df=n-2
t_stats = beta/sqrt(diag(var_beta))
p_val = pt(-abs(t_stats),df=n-2)*2
# adding result to summary.
reg_summary[i,2:5] = as.numeric(cbind(beta[1],sqrt(diag(var_beta)[1]),t_stats[1],p_val[1]))
}
end = Sys.time()
start = Sys.time()
for (i in c(1:p)){
if (i%%10000==0) print(glue('{100*(i/p)}% calculated'))
Theta[2,-2] = as.matrix(cov_xy_part[i,])
Theta[-2,2] = as.matrix(t(cov_xy_part[i,]))
Theta[2,2] = var_x[i]
# get Omega, Lambda, b
Omega = Theta[2:d,2:d]
Lambda = diag(diag(Omega))
b = matrix(Theta[2:d,1] / diag(Theta[2:d,2:d]),d-1,1)
# compute regression parameter beta. and its variance
tryCatch({rv_Omega = solve(Omega)},error = function(e){
})
# rv_Omega = try(solve(Omega))
beta = rv_Omega %*% Lambda %*% b
var_beta = as.numeric((Theta[1,1]-t(beta)%*%Lambda%*%b)/(n-(d-2)-1))*rv_Omega
# beta/SE follow a t-dis with df=n-2
t_stats = beta/sqrt(diag(var_beta))
p_val = pt(-abs(t_stats),df=n-2)*2
# adding result to summary.
reg_summary[i,2:5] = as.numeric(cbind(beta[1],sqrt(diag(var_beta)[1]),t_stats[1],p_val[1]))
}
Sys.time()-start
start = Sys.time()
for (i in c(1:p)){
if (i%%10000==0) print(glue('{100*(i/p)}% calculated'))
Theta[2,-2] = as.matrix(cov_xy_part[i,])
Theta[-2,2] = as.matrix(t(cov_xy_part[i,]))
Theta[2,2] = var_x[i]
# get Omega, Lambda, b
Omega = Theta[2:d,2:d]
Lambda = diag(diag(Omega))
b = matrix(Theta[2:d,1] / diag(Theta[2:d,2:d]),d-1,1)
# compute regression parameter beta. and its variance
tryCatch({rv_Omega = solve(Omega)},error = function(e){
})
# rv_Omega = try(solve(Omega))
beta = rv_Omega %*% Lambda %*% b
var_beta = as.numeric((Theta[1,1]-t(beta)%*%Lambda%*%b)/(n-(d-2)-1))*rv_Omega
# beta/SE follow a t-dis with df=n-2
t_stats = beta/sqrt(diag(var_beta))
p_val = pt(-abs(t_stats),df=n-2)*2
# adding result to summary.
reg_summary[i,2:5] = as.numeric(cbind(beta[1],sqrt(diag(var_beta)[1]),t_stats[1],p_val[1]))
}
Sys.time()-start
reg_summary
head(reg_summary)
var_x
